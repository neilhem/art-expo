import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import { RootState } from '../../app/store';
import { fetchExhibitionList } from './exhibitionAPI';
import {
  Exhibition,
  ExhibitionReqParams,
  ExhibitionResParams,
} from './exhibitionModel';

export interface ExhibitionState {
  items: Exhibition[];
  page: number;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: ExhibitionState = {
  items: [],
  page: 1,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchExhibitionListAsync = createAsyncThunk(
  'exhibition/sendMessage',
  async (params: ExhibitionReqParams) => {
    const response: ExhibitionResParams = await fetchExhibitionList(params);
    // The value we return becomes the `fulfilled` action payload
    return { items: response.data, page: response.pagination.current_page };
  }
);

export const exhibitionSlice = createSlice({
  name: 'exhibition',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loadItems: (state, action: PayloadAction<Exhibition[]>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.items = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchExhibitionListAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchExhibitionListAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = [...state.items, ...action.payload.items];
        state.page = action.payload.page;
      })
      .addCase(fetchExhibitionListAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { loadItems } = exhibitionSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.chat.value)`
export const selectExhibtionItems = (state: RootState) =>
  state.exhibition.items;

export const selectExhibtionStatus = (state: RootState) =>
  state.exhibition.status;

export const selectExhibtionPage = (state: RootState) => state.exhibition.page;

export default exhibitionSlice.reducer;
